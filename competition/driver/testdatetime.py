# -*- coding: utf-8 -*-
__author__ = 'lihailong3'

import datetime as dt
import time


# c="\'NaN\'"
# print c
# d='NaN'
# print c == 'NaN'
# print c == d

# a = 'NaN'
# b = 'NaN'
# c = ['NaN','NaN']
# print a == c[0]

d = [39.0, 39.0, 39.0, 38.0, 38.0, 38.0, 38.0, 37.0, 37.0, 37.0, 37.0, 36.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 34.0, 24.0, 15.0, 15.0, 15.0, 12.0, 12.0, 12.0, 7.0, 7.0, 7.0, 5.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 40.0, 40.0, 39.0, 37.0, 0.0, 0.0, 35.0, 115.0, 112.0, 60.0, 0.0, 26.0, 12.0, 6.0]

print len(d)
# a = [1, 'NaN']
#
# if a[1] == 'NaN':
#     print 1
# else:
#     print 0

# a=[1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,13,15,0,1,3,1,0,4,2,0,2,2,5,0,0,0,0,0,1,0,0,4,0,0,1,2,1,0,3,4,1,56]
# print len(a)

# vendibility_start_date = dt.datetime.strptime("2017-05-08", "%Y-%m-%d").date()
# sales_start_date = dt.datetime.strptime("2017-04-05", "%Y-%m-%d").date()
# vendibility_y = [0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1]
#
# vendibility_days = (vendibility_start_date - sales_start_date).days
# if vendibility_days > 0:
#     #需要前插入days个0
#     for g in range(vendibility_days):
#         vendibility_y.insert(0, 0)
# elif vendibility_days < 0:
#     #需要向后删除days个数
#     vendibility_y = vendibility_y[abs(vendibility_days):]
#
# print vendibility_y
# print len(vendibility_y)
# #686785400000000_0010_20170501
# #686785400000000_0010
# k = "4587686#10"
# sku_id = k.split("#")[0]
# dc_id = k.split("#")[1]
#
# sku_dc=sku_id[::-1].ljust(15, '0')+"_"+dc_id.rjust(4,'0')
# print sku_dc
# print sku_id[::-1],len(sku_id[::-1])
# print sku_id[::-1].ljust(15, '0')

# if len(sku_id) < 15:
#     bc_length = 15 - len(sku_id)
#     for i in range(bc_length):



# priceAfterDiscount_start_date = dt.datetime.strptime("2017-05-10", "%Y-%m-%d").date()
# sales_start_date = dt.datetime.strptime("2017-05-11", "%Y-%m-%d").date()
#
# priceAfterDiscount_days = (priceAfterDiscount_start_date - sales_start_date).days
# print priceAfterDiscount_days,abs(priceAfterDiscount_days)


# print dt.datetime.now()+dt.timedelta(-117)+dt.timedelta(116)

# yesterday = (dt.datetime.now() + dt.timedelta(-1)).strftime("%Y-%m-%d")
# cal_date = (dt.datetime.now() + dt.timedelta(-118)).strftime("%Y-%m-%d")
# a="[1,2,2,3,4]"
# print a.replace("[", "").replace("]", "")

# max_date = dt.datetime.strptime("2017-04-01", "%Y-%m-%d").date()
# print (max_date + dt.timedelta(41)).strftime("%Y-%m-%d")

# bjdays28=[97,105,133,140,118,21,31,94,135,63,61,90,40,117,49,62,120,65,50,117,101,48,97,67,179,191,486,226]
# bjdays14=[49,62,120,65,50,117,101,48,97,67,179,191,486,226]
# bjdays7=[48,97,67,179,191,486,226]
# print 'bj',sum(bjdays7),sum(bjdays14),sum(bjdays28)
#
# shdays28=[47,43,56,15,13,18,18,41,9,0,0,0,0,0,0,0,2,10,8,14,6,28,15,8,3,0,0,0]
# shdays14=[0,0,2,10,8,14,6,28,15,8,3,0,0,0]
# shdays7=[28,15,8,3,0,0,0]
# print 'sh',sum(shdays7),sum(shdays14),sum(shdays28)
#
# print 'qg',sum(bjdays7)+sum(shdays7),sum(bjdays14)+sum(shdays14),sum(bjdays28)+sum(shdays28)


# print yesterday
# print cal_date

# start_date = today + dt.timedelta(-117)
# today = dt.datetime.now()
# print start_date

# print start_date.strftime("%Y-%m-%d")
# 2017-01-27  2016-10-02   26122638   27654080   26122632  26122638
# 2017-01-15  2016-09-20   27645885   27443019

#2014-12-23   2017-02-06   777

#2017-01-31

# 681,771

#华北$济南市$全球购$济南配送中心,0,2015-10-24,479,
# tmp_date = dt.datetime.strptime("2015-10-24", "%Y-%m-%d").date()
# start_date = (tmp_date + dt.timedelta(479)).strftime("%Y-%m-%d")
# ts=[2, 3, 3, 20, 26, 31, 24, 26, 56, 88, 142, 213, 195, 185, 236, 194, 178, 480, 1529, 643, 185, 102, 126, 88, 77, 139, 144, 147, 257, 189, 261, 302, 246, 434, 1414, 600, 287, 211, 394, 419, 211, 185, 230, 116, 265, 232, 194, 192, 296, 575, 317, 115, 207, 242, 190, 209, 133, 175, 213, 219, 314, 196, 236, 169, 128, 163, 110, 181, 215, 272, 200, 342, 208, 225, 411, 301, 309, 233, 193, 235, 499, 267, 301, 270, 247, 356, 416, 347, 370, 327, 390, 446, 421, 346, 519, 625, 679, 305, 322, 307, 241, 579, 270, 187, 176, 69, 50, 55, 108, 122, 182, 218, 304, 481, 386, 487, 369, 519, 566, 497, 366, 552, 712, 495, 932, 1316, 824, 628, 509, 660, 480, 423, 399, 440, 498, 408, 589, 375, 491, 594, 535, 463, 611, 467, 498, 559, 514, 385, 397, 423, 452, 410, 556, 931, 547, 504, 527, 561, 683, 583, 745, 616, 637, 874, 664, 514, 588, 302, 310, 414, 377, 407, 309, 705, 947, 592, 374, 419, 470, 479, 509, 687, 565, 464, 483, 664, 567, 533, 726, 470, 547, 439, 420, 445, 555, 873, 549, 437, 484, 621, 524, 463, 558, 479, 424, 522, 498, 576, 477, 738, 476, 535, 557, 724, 641, 597, 832, 1559, 737, 480, 504, 583, 558, 734, 452, 708, 510, 663, 592, 414, 1054, 935, 873, 965, 792, 791, 1352, 1896, 8033, 2011, 1098, 633, 370, 440, 429, 475, 403, 425, 622, 669, 1332, 557, 421, 487, 452, 570, 426, 464, 700, 472, 498, 485, 606, 548, 626, 830, 632, 596, 559, 644, 957, 671, 712, 517, 472, 590, 599, 742, 618, 695, 713, 657, 548, 534, 558, 719, 662, 543, 487, 563, 655, 549, 678, 683, 688, 598, 658, 511, 674, 667, 614, 586, 623, 782, 901, 599, 617, 655, 568, 562, 581, 630, 639, 577, 693, 642, 529, 708, 764, 681, 800, 752, 689, 638, 698, 674, 633, 651, 704, 680, 661, 758, 868, 970, 1123, 1053, 655, 511, 563, 560, 569, 606, 653, 596, 569, 706, 713, 699, 628, 722, 623, 722, 714, 736, 714, 592, 625, 646, 617, 747, 659, 842, 575, 880, 645, 612, 826, 662, 1030, 1178, 837, 872, 800, 903, 2084, 1520, 1060, 985, 1196, 1088, 1109, 1338, 1634, 3058, 9245, 1894, 520, 547, 825, 551, 539, 561, 603, 648, 726, 849, 561, 731, 2150, 1081, 742, 753, 646, 656, 523, 533, 622, 689, 764, 686, 609, 756, 809, 912, 1168, 3133, 834, 554, 673, 769, 883, 763, 919, 1213, 991, 1028, 883, 784, 1280, 853, 948, 750, 927, 776, 820, 945, 869, 776, 790, 681, 718, 764, 722, 961, 1317, 1156, 753, 882, 874, 751, 765, 849, 670, 682, 616, 536, 495, 444, 443, 318, 247, 178, 207, 400, 427, 496, 469, 794, 871, 1024, 685, 829, 903, 0, 932, 961, 677, 809, 819]
# print start_date
# print len(ts)

#华南$南宁市$大件$南宁配送中心,0,2012-10-03,1595
# tmp_date = dt.datetime.strptime("2012-10-03", "%Y-%m-%d").date()
# start_date = (tmp_date + dt.timedelta(1595)).strftime("%Y-%m-%d")
# ts_2=[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 33, 30, 47, 31, 35, 27, 37, 39, 46, 44, 33, 28, 37, 31, 27, 35, 25, 27, 36, 41, 40, 32, 42, 34, 26, 37, 36, 26, 36, 49, 27, 39, 36, 43, 44, 55, 41, 32, 27, 35, 30, 16, 14, 9, 9, 4, 4, 19, 8, 19, 22, 28, 34, 50, 45, 40, 37, 40, 43, 32, 28, 32, 33, 32, 37, 33, 37, 32, 46, 30, 29, 36, 41, 58, 49, 53, 40, 29, 46, 36, 31, 35, 30, 28, 37, 27, 30, 30, 32, 49, 46, 34, 30, 46, 28, 38, 41, 32, 35, 26, 22, 29, 52, 31, 46, 44, 32, 34, 30, 33, 32, 35, 37, 49, 41, 42, 47, 39, 49, 54, 58, 36, 43, 54, 38, 60, 72, 52, 48, 45, 46, 40, 42, 30, 28, 29, 28, 29, 45, 32, 34, 37, 47, 51, 42, 54, 50, 57, 57, 44, 52, 44, 56, 69, 69, 60, 62, 98, 92, 108, 103, 105, 88, 94, 129, 123, 121, 106, 104, 109, 103, 89, 90, 266, 603, 296, 173, 118, 140, 117, 98, 86, 94, 105, 77, 115, 113, 84, 88, 84, 92, 102, 71, 75, 89, 108, 112, 147, 86, 109, 118, 114, 103, 89, 111, 111, 93, 98, 76, 104, 94, 82, 72, 60, 81, 76, 78, 87, 82, 85, 73, 73, 118, 88, 87, 77, 108, 74, 89, 131, 149, 107, 211, 134, 129, 156, 93, 87, 58, 78, 76, 83, 92, 92, 86, 95, 100, 93, 77, 83, 114, 103, 98, 81, 85, 80, 86, 141, 116, 89, 128, 162, 114, 98, 86, 89, 105, 77, 84, 88, 126, 140, 134, 105, 146, 118, 110, 120, 153, 255, 176, 155, 167, 143, 145, 191, 119, 90, 89, 94, 89, 68, 84, 77, 63, 73, 81, 71, 65, 142, 98, 72, 107, 35, 0, 0, 0, 0, 84, 87, 145, 115, 100, 137, 132, 157, 137, 176, 159, 406, 1505, 358, 157, 84, 75, 74, 99, 89, 88, 98, 118, 76, 77, 77, 133, 117, 111, 114, 128, 98, 83, 110, 115, 111, 114, 84, 81, 96, 140, 129, 216, 734, 145, 131, 134, 130, 96, 108, 106, 97, 83, 101, 143, 126, 177, 141, 124, 116, 131, 175, 175, 263, 159, 204, 167, 155, 155, 133, 202, 146, 154, 128, 171, 204, 195, 176, 240, 203, 225, 204, 273, 175, 149, 143, 123, 130, 116, 84, 101, 56, 29, 42, 47, 59, 73, 103, 113, 129, 163, 136, 151, 188, 177, 155, 178, 148, 141, 164, 150, 175, 141, 178, 140, 142, 140, 147, 152, 157, 146, 139, 154, 120, 160, 127, 131, 260, 175, 174, 143, 166, 130, 155, 176, 160, 212, 162, 158, 105, 151, 130, 141, 105, 102, 188, 139, 131, 178, 143, 153, 163, 144, 145, 139, 131, 143, 98, 93, 122, 142, 164, 154, 155, 123, 144, 153, 165, 146, 188, 190, 154, 137, 414, 218, 196, 189, 256, 229, 243, 274, 280, 290, 527, 426, 418, 303, 185, 177, 158, 175, 197, 216, 217, 198, 248, 258, 191, 191, 242, 212, 301, 301, 329, 288, 338, 353, 343, 308, 296, 278, 245, 228, 240, 523, 373, 503, 384, 374, 358, 295, 274, 471, 429, 395, 285, 291, 213, 256, 413, 859, 2349, 781, 432, 221, 205, 205, 212, 181, 201, 183, 224, 239, 243, 219, 202, 234, 248, 254, 200, 236, 264, 353, 288, 284, 231, 222, 247, 282, 260, 254, 275, 185, 201, 205, 238, 258, 242, 255, 246, 221, 355, 245, 268, 270, 235, 247, 276, 282, 268, 253, 232, 203, 164, 218, 433, 259, 250, 253, 557, 271, 272, 510, 288, 256, 236, 193, 152, 158, 221, 195, 164, 198, 196, 197, 150, 330, 251, 253, 220, 235, 228, 185, 182, 248, 220, 253, 258, 320, 348, 295, 255, 196, 186, 144, 156, 177, 493, 347, 386, 338, 363, 299, 374, 373, 426, 432, 362, 332, 349, 306, 391, 492, 309, 243, 231, 202, 170, 224, 214, 227, 206, 218, 182, 153, 273, 190, 222, 244, 194, 171, 167, 283, 225, 212, 188, 179, 396, 291, 424, 361, 348, 408, 464, 403, 464, 1430, 5052, 838, 280, 217, 194, 195, 253, 232, 237, 226, 211, 182, 178, 342, 250, 249, 262, 250, 207, 240, 269, 283, 284, 265, 228, 233, 257, 342, 258, 589, 627, 2296, 376, 321, 318, 266, 287, 316, 294, 283, 265, 368, 372, 378, 439, 373, 380, 295, 533, 389, 444, 672, 510, 520, 469, 369, 386, 380, 376, 343, 361, 351, 492, 429, 436, 391, 397, 413, 374, 677, 517, 605, 539, 525, 504, 505, 761, 787, 731, 690, 639, 655, 723, 813, 737, 747, 841, 756, 703, 750, 1050, 524, 335, 283, 249, 220, 227, 208, 149, 92, 106, 158, 186, 254, 318, 426, 592, 630, 582, 605, 483, 631, 467, 494, 437, 513, 360, 370, 455, 439, 497, 588, 604, 642, 796, 635, 556, 589, 599, 585, 502, 498, 592, 446, 492, 495, 503, 475, 441, 547, 530, 546, 577, 599, 519, 397, 501, 621, 593, 539, 465, 385, 372, 518, 422, 456, 576, 518, 562, 591, 1110, 747, 770, 636, 588, 618, 703, 750, 732, 821, 873, 1771, 1338, 1599, 1047, 693, 705, 696, 659, 585, 577, 679, 564, 569, 518, 535, 464, 471, 760, 637, 747, 660, 717, 540, 464, 581, 650, 723, 950, 1291, 1213, 833, 2815, 1655, 1520, 1236, 1133, 1003, 956, 1093, 1011, 959, 867, 925, 757, 782, 902, 1135, 2522, 8660, 2057, 1857, 1104, 1012, 834, 720, 675, 650, 788, 973, 1148, 1381, 1735, 1981, 1802, 1114, 944, 959, 871, 792, 759, 658, 688, 796, 1320, 1141, 1273, 1163, 1042, 836, 800, 1058, 906, 801, 747, 686, 587, 564, 621, 1020, 602, 630, 593, 557, 564, 771, 653, 705, 669, 692, 713, 802, 926, 826, 759, 1327, 1100, 1168, 1106, 1156, 1561, 1005, 764, 782, 737, 728, 841, 710, 730, 810, 795, 705, 728, 882, 726, 659, 697, 751, 699, 716, 721, 638, 783, 725, 802, 721, 721, 863, 762, 814, 771, 772, 2359, 940, 1396, 988, 899, 867, 836, 781, 773, 1497, 1116, 983, 1824, 1459, 1271, 1072, 1039, 994, 1317, 988, 663, 727, 670, 775, 595, 656, 586, 564, 512, 510, 1160, 798, 752, 650, 592, 612, 587, 770, 615, 679, 629, 573, 811, 2554, 1554, 1250, 964, 2144, 1726, 1236, 1492, 1388, 4783, 17722, 2816, 806, 674, 638, 643, 632, 602, 554, 645, 652, 622, 721, 762, 809, 792, 917, 890, 826, 1116, 1003, 1029, 1106, 918, 841, 879, 879, 852, 867, 1482, 2496, 7350, 1609, 783, 702, 747, 1021, 992, 942, 889, 918, 904, 1193, 1335, 1307, 1206, 1010, 1200, 1160, 1638, 1497, 3620, 2183, 1779, 1406, 1082, 1095, 1093, 1115, 1035, 1178, 2189, 1515, 1574, 1524, 2757, 1742, 2247, 2475, 1989, 2202, 2731, 2321, 2316, 2530, 2785, 2718, 2655, 2577, 2409, 2162, 1687, 1204, 683, 693, 581, 483, 379, 251, 308, 440, 570, 850, 950, 1208, 1474, 1548, 1643, 1531, 1272, 1271, 1108, 1069, 1424, 1197, 1128, 1168, 1056, 1005, 1007, 1138, 1740, 1244, 1091, 1081, 1002, 1150, 2345, 1377, 1238, 1536, 1182, 1269, 1089, 2143, 2620, 1552, 1110, 1078, 990, 1043, 1285, 1235, 1071, 1229, 1464, 1016, 1013, 1317, 1498, 1121, 1124, 1057, 965, 1028, 918, 1096, 1394, 1715, 1770, 1376, 1426, 1370, 1339, 1588, 3005, 1786, 1726, 1508, 3039, 1842, 1305, 1226, 1309, 1242, 1246, 1555, 2523, 1404, 2009, 1837, 2127, 3536, 2752, 2377, 1974, 1992, 2000, 1718, 1639, 2352, 1647, 1692, 1309, 1823, 1268, 1151, 1793, 1385, 1679, 1710, 1198, 1228, 1222, 1113, 1716, 1655, 1385, 1320, 1254, 1196, 1166, 1285, 7363, 4501, 4490, 1898, 1525, 2241, 4234, 2108, 2056, 1647, 1512, 1876, 1821, 1686, 2094, 1530, 3311, 15104, 3860, 3054, 1021, 1133, 1301, 1322, 1361, 1533, 1798, 3081, 1750, 1650, 1302, 1209, 1154, 1648, 1675, 1332, 1245, 1455, 1755, 2143, 2318, 1507, 1745, 2331, 1316, 1337, 1378, 1985, 1486, 1386, 1521, 1101, 1151, 1212, 1353, 2634, 1430, 1908, 1165, 1244, 1302, 1561, 1184, 1105, 1130, 1230, 1030, 1185, 1675, 1439, 1623, 1430, 1102, 884, 793, 3876, 1244, 1245, 2806, 1313, 1118, 1052, 1010, 992, 1154, 1091, 1246, 1105, 930, 1526, 1087, 965, 1389, 1105, 1230, 1034, 1149, 1155, 949, 1121, 1563, 1133, 1150, 1039, 978, 922, 1470, 1244, 1303, 923, 2527, 1457, 868, 962, 1577, 843, 746, 2316, 1192, 996, 1194, 1478, 2726, 1697, 1530, 1401, 1327, 1237, 1338, 1153, 832, 870, 753, 768, 747, 729, 757, 679, 1049, 1861, 1079, 863, 1258, 846, 808, 865, 1001, 951, 802, 693, 673, 725, 694, 7339, 1528, 1021, 3510, 2069, 1184, 1369, 1682, 976, 4277, 23631, 2663, 867, 873, 838, 783, 714, 833, 769, 770, 1188, 822, 864, 1145, 1898, 1105, 998, 1282, 821, 808, 2503, 1216, 857, 807, 1051, 1099, 1353, 960, 981, 1305, 1042, 12249, 1633, 899, 1031, 1010, 974, 1118, 1353, 1228, 1288, 1574, 1177, 1067, 1322, 2040, 1508, 1057, 1136, 1171, 2040, 4886, 2627, 1993, 1675, 1482, 1645, 1529, 1778, 2533, 2794, 3623, 2468, 2740, 2778, 3037, 3636, 3444, 3543, 3360, 2821, 2681, 2467, 1788, 1199, 582, 413, 289, 345, 473, 543, 732, 927, 1043, 1310, 1401, 1263, 1439, 1434, 0, 1516, 1374, 1304, 1043, 1521]
# print start_date
# print len(ts_2)

# print (dt.datetime.now() + dt.timedelta(-118)).strftime("%Y-%m-%d")
# print type((dt.datetime.now() + dt.timedelta(-1)).strftime("%Y-%m-%d"))
#
# a = dt.datetime.now()
# b = a
# a = a + dt.timedelta(12)
# print a
# print b

# max_date = dt.datetime.strptime("2016-12-27", "%Y-%m-%d").date()
# # min_date = dt.datetime.strptime(min_date_str, "%Y-%m-%d").date()
# print str(max_date+dt.timedelta(-100))


# print dt.datetime.now().strftime("%Y-%m-%d")
#
# print  time.strftime("%m",time.localtime(time.time()))
#
# #09,10
# print int(dt.datetime.now().strftime("%m"))
#
# print int(dt.datetime.now().strftime("%Y"))
#
# today = dt.datetime.strptime("2016-10-28", "%Y-%m-%d").date()
# end_date = today + dt.timedelta(-30)
#
# print end_date.strftime("%m")
#
# print int(end_date.strftime("%m"))
#
#
# def is_leap_year(year):
#     if (year % 4) == 0:
#         if (year % 100) == 0:
#             if (year % 400) == 0:
#                 print("{0} 是闰年".format(year))   # 整百年能被400整除的是闰年
#             else:
#                 print("{0} 不是闰年".format(year))
#         else:
#             print("{0} 是闰年".format(year))       # 非整百年能被4整除的为闰年
#     else:
#         print("{0} 不是闰年".format(year))
#
# def is_leap_year2(year):
#     if (year % 4) == 0:
#         if (year % 100) == 0:
#             if (year % 400) == 0:
#                 return True
#             else:
#                 return False
#         else:
#             return True
#     else:
#         return False
#
# print is_leap_year2(2000)
#
# if is_leap_year2(2001):
#     print "闰年"
# else:
#     print "非闰年"